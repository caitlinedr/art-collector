{"version":3,"sources":["api/index.js","components/Feature.js","components/Loading.js","components/Preview.js","components/Search.js","components/Title.js","index.js"],"names":["BASE_URL","KEY","fetchQueryResultsFromTermAndValue","term","value","a","fetch","encodeURI","split","join","response","json","data","fetchQueryResultsFromURL","url","fetchQueryResults","century","classification","queryString","fetchAllCenturies","localStorage","getItem","JSON","parse","records","setItem","stringify","fetchAllClassifications","Searchable","props","searchTerm","searchValue","setIsLoading","setSearchResults","className","href","onClick","event","preventDefault","result","console","error","Feature","featuredResult","title","dated","images","primaryimageurl","description","culture","style","technique","medium","dimensions","people","department","division","contact","creditline","id","Fragment","toLowerCase","map","person","displayname","image","src","baseimageurl","alt","Loading","Preview","setFeaturedResult","info","searchResults","fetchPage","pageUrl","results","disabled","prev","next","record","index","key","Search","useState","centuryList","setCenturyList","classificationList","setClassificationList","setQueryString","setCentury","setClassification","useEffect","Promise","all","then","centuries","classifications","catch","onSubmit","htmlFor","type","placeholder","onChange","target","length","name","listItem","Title","App","isLoading","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5a9d8776.chunk.js","sourcesContent":["/**\n * This file features and exports all of your calls to the API\n * \n * You need to replace YOUR_API_KEY in the string associated with KEY with your actual API key\n */\nexport const BASE_URL = 'https://api.harvardartmuseums.org';\nexport const KEY = 'apikey=ddd64d07-3be4-4e3a-afe1-f8c1f52cbe7c';\n\n/**\n * This will make a call to the API for a single term and value (e.g. \"person\", and \"unknown\"), and return the result\n */\nexport async function fetchQueryResultsFromTermAndValue(term, value) {\n  try {\n    const response = await fetch(`${ BASE_URL }/object?${ KEY }&${ term }=${ encodeURI(value.split('-').join('|')) }`);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This will make a call to the API for a preformed url (useful for previous and next buttons), and return the result\n */\nexport async function fetchQueryResultsFromURL(url) {\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * Requires an object { century: '', classification: '', queryString: '' } to be passed in as an argument\n * \n * Then makes a call to the API, and returns the first page of results\n */\nexport async function fetchQueryResults({\n  century,\n  classification,\n  queryString,\n}) {\n  const url = `${ BASE_URL }/object?${ KEY }&classification=${ classification }&century=${ \n    century }&keyword=${ queryString }`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n\n    return data;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are centuries stored in localStorage, or fetches them from the API and stores them in localStorage if not\n */\nexport async function fetchAllCenturies() {\n  if (localStorage.getItem('centuries')) {\n    return JSON.parse(localStorage.getItem('centuries'));\n  }\n\n  const url = `${ BASE_URL }/century?${ KEY }&size=100&sort=temporalorder`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n  \n    localStorage.setItem('centuries', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}\n\n/**\n * This returns early if there are classifications stored in localStorage, or fetches them from the API and stores them in localStorage if not \n */\nexport async function fetchAllClassifications() {\n  if (localStorage.getItem('classifications')) {\n    return JSON.parse(localStorage.getItem('classifications'));\n  }\n\n  const url = `${ BASE_URL }/classification?${ KEY }&size=100&sort=name`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    const records = data.records;\n\n    localStorage.setItem('classifications', JSON.stringify(records));\n\n    return records;\n  } catch (error) {\n    throw error;\n  }\n}","import React, { Fragment } from 'react';\n\nimport { fetchQueryResultsFromTermAndValue } from '../api';\n\nconst Searchable = (props) => {\n  const searchTerm = props.searchTerm\n  const searchValue = props.searchValue\n  const setIsLoading = props.setIsLoading\n  const setSearchResults = props.setSearchResults\n\n  return (<span className=\"content\">\n    <a href=\"#\" onClick={async (event) => {\n        \n        event.preventDefault()\n        setIsLoading(true)\n\n        try {\n            const result = await fetchQueryResultsFromTermAndValue(searchTerm, searchValue)\n            setSearchResults(result)\n        } catch (error) {\n            console.error(error)\n        } finally {\n            setIsLoading(false)\n        }\n\n    }}>{searchValue}</a>\n   </span>)\n}\n\nconst Feature = (props) => {\n    const featuredResult = props.featuredResult\n    const setIsLoading = props.setIsLoading \n    const setSearchResults = props.setSearchResults\n\n    if(featuredResult) {\n        const { \n            title, \n            dated, \n            images, \n            primaryimageurl, \n            description, \n            culture, \n            style, \n            technique, \n            medium, \n            dimensions, \n            people, \n            department, \n            division, \n            contact, \n            creditline\n        } = featuredResult\n\n        return (\n            <main id=\"feature\">\n                <React.Fragment>\n                    <div className=\"object-feature\">\n                        <header>\n                            <h3>{title}</h3>\n                            <h4>{dated}</h4>\n                        </header>\n                        <section className=\"facts\">\n                        \n                            {description ? <span className=\"title\">Description</span> : null }\n                            {description ? <span className=\"content\">{description}</span> : null}\n    \n                            {culture ? <span className=\"title\">Culture</span> : null}\n                            {culture ? <Searchable searchTerm=\"culture\" searchValue={culture} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/> : null}\n    \n                            {style ? <span className=\"title\">Style</span> : null }\n                            {style ? <span className=\"content\">{style}</span> : null}\n    \n                            {technique ? <span className=\"title\">Technique</span> : null }\n                            {technique ? <Searchable searchTerm=\"technique\" searchValue={technique} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/> : null}\n    \n                            {medium ? <span className=\"title\">Medium</span> : null}\n                            {medium ? <Searchable searchTerm=\"medium\" searchValue={medium.toLowerCase()} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/> : null}\n    \n                            {dimensions ? <span className=\"title\">Dimensions</span> : null}\n                            {dimensions ? <span className=\"content\">{dimensions}</span> : null}\n    \n                            {people ? <span className=\"title\">People</span> : null}\n                            {people ? people.map((person) => {\n                                return <Searchable searchTerm=\"person\" searchValue={person.displayname} setIsLoading={setIsLoading} setSearchResults={setSearchResults}/>\n                            }) : null}\n    \n                            {department ? <span className=\"title\">Department</span> : null}\n                            {department ? <span className=\"content\">{department}</span> : null}\n\n                            {division ? <span className=\"title\">Division</span> : null}\n                            {division ? <span className=\"content\">{division}</span> : null}\n\n                            {contact ? <span className=\"title\">Contact</span> : null}\n                            {contact ? <span className=\"content\">{contact}</span> : null}\n\n                            {creditline ? <span className=\"title\">Creditline</span> : null}\n                            {creditline ? <span className=\"content\">{creditline}</span> : null}\n                        </section>\n                        <section className=\"photos\">\n                            {images ? images.map((image) => {\n                                return <img src={image.baseimageurl} alt={description} />\n                            }) : primaryimageurl ? <img src={primaryimageurl}/> : null}\n                        </section>\n                    </div>\n                </React.Fragment>\n            </main>)\n    } else {\n        return <main id=\"feature\"></main>\n    }   \n}\n\nexport default Feature;\n","import React from 'react';\n\nconst Loading = () => {\n    return (\n        <div id=\"loading\">\n            <h2 className=\"message\">Searching...</h2>\n        </div>\n    )\n}\n\nexport default Loading","import React from 'react';\n\nimport { fetchQueryResultsFromURL } from '../api';\n\nconst Preview = (props) => {\n  \n  const setSearchResults = props.setSearchResults\n  const setFeaturedResult = props.setFeaturedResult\n  const setIsLoading = props.setIsLoading\n  const info = props.searchResults.info\n  const records = props.searchResults.records\n\n  async function fetchPage(pageUrl) {\n    setIsLoading(true);\n\n    try {\n      const results = await fetchQueryResultsFromURL(pageUrl);\n      setSearchResults(results);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  }\n\n  return <aside id=\"preview\">\n    <header className=\"pagination\">\n      <button \n        disabled={'prev' in info ? false : true}\n        className=\"previous\"\n        onClick={() => fetchPage(info.prev)}>Previous</button>\n      <button\n        disabled={'next' in info ? false : true}\n        className=\"next\"\n        onClick={() => fetchPage(info.next)}>Next</button>\n    </header>\n    <section className=\"results\">\n      {records.map((record, index) => {\n          return (<div  \n            key={ index }\n            className=\"object-preview\"\n            onClick={(event) => {\n              event.preventDefault()\n              setFeaturedResult(record)\n            }}>\n            {record.primaryimageurl ? <img src={ record.primaryimageurl } alt={ record.description } /> : null}\n            {record.title ? <h3>{ record.title }</h3> : <h3>MISSING INFO</h3>}\n          </div>)\n        })\n      }\n     </section>\n   </aside>\n}\n\nexport default Preview;","import React, { useEffect, useState } from 'react';\n\nimport { \n  fetchAllCenturies,\n  fetchAllClassifications,\n  fetchQueryResults,\n  fetchQueryResultsFromTermAndValue\n} from '../api';\n\nconst Search = (props) => {\n\n  const setIsLoading = props.setIsLoading\n  const setSearchResults = props.setSearchResults\n\n  const [centuryList, setCenturyList] = useState([])\n  const [classificationList, setClassificationList] = useState([])\n  const [queryString, setQueryString] = useState('')\n  const [century, setCentury] = useState('any')\n  const [classification, setClassification] = useState('any')\n\n  useEffect(() => {\n    Promise.all([\n      fetchAllCenturies(),\n      fetchAllClassifications()\n    ]).then(([centuries, classifications]) => {\n      setCenturyList(centuries)\n      setClassificationList(classifications)\n    }).catch((error) => console.error(error))\n  }, []);\n\n  return <form id=\"search\" onSubmit={async (event) => {\n    event.preventDefault()\n    setIsLoading(true)\n\n    try {\n      const results = await fetchQueryResults({ century, classification, queryString })\n      setSearchResults(results)\n    } catch(error) {\n      console.error(error)\n    } finally {\n      setIsLoading(false)\n    }\n\n  }}>\n    <fieldset>\n      <label htmlFor=\"keywords\">Query</label>\n      <input \n        id=\"keywords\" \n        type=\"text\" \n        placeholder=\"enter keywords...\" \n        value={queryString} \n        onChange={(event) => setQueryString(event.target.value)}/>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-classification\">Classification <span className=\"classification-count\">({ classificationList.length })</span></label>\n      <select \n        name=\"classification\"\n        id=\"select-classification\"\n        value={classification} \n        onChange={(event) => setClassification(event.target.value)}>\n        <option value=\"any\">Any</option>\n        {classificationList.map((listItem, index) => {\n          return <option value={listItem.name} key={index}>{listItem.name}</option>\n        })}\n      </select>\n    </fieldset>\n    <fieldset>\n      <label htmlFor=\"select-century\">Century <span className=\"century-count\">({ centuryList.length })</span></label>\n      <select \n        name=\"century\" \n        id=\"select-century\"\n        value={century} \n        onChange={(event) => setCentury(event.target.value)}>\n        <option value=\"any\">Any</option>\n        {centuryList.map((listItem, index) => {\n           return <option value={listItem.name} key={index}>{listItem.name}</option>\n        })}\n      </select>\n     </fieldset>\n    <button>SEARCH</button>\n  </form>\n}\n\nexport default Search;","import React from 'react';\n\nconst Title = () => {\n    return (\n        <div id=\"title\">\n            <h1>\n            The Art Collector\n            </h1>\n            <h5>\n            Search the Harvard Art Museums' Private Collections\n            </h5>\n        </div>\n    )\n}\n\nexport default Title","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n  Feature,\n  Loading,\n  Preview,\n  Search,\n  Title\n} from './components';\n\nconst App = () => {\n  \n  const [searchResults, setSearchResults] = useState({info: {}, records: []})\n  const [featuredResult, setFeaturedResult] = useState(null)\n  const [isLoading, setIsLoading] = useState(false)\n\n  return <div className=\"app\">\n    <Title />\n    <Search setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n    <Preview searchResults={searchResults} setIsLoading={setIsLoading} setSearchResults={setSearchResults} setFeaturedResult={setFeaturedResult} />\n    <Feature featuredResult={featuredResult} setIsLoading={setIsLoading} setSearchResults={setSearchResults} />\n    {isLoading === true ? <Loading /> : null}\n  </div>\n}\n\nReactDOM.render(\n<App />,\ndocument.getElementById('app')\n)"],"sourceRoot":""}